from dataclasses import dataclass

TAPE_LENGTH = 30000
CELL_SIZE = 256

CONSTANTS = {
    16: ">++++[<++++>-]<",
    17: ">++++[<++++>-]<+",
    18: ">+++[<++++++>-]<",
    19: ">+++[<++++++>-]<+",
    20: ">++++[<+++++>-]<",
    21: ">+++[<+++++++>-]<",
    22: ">+++[<+++++++>-]<+",
    23: ">++++[<++++++>-]<-",
    24: ">++++[<++++++>-]<",
    25: ">+++++[<+++++>-]<",
    26: ">+++++[<+++++>-]<+",
    27: ">+++[<+++++++++>-]<",
    28: ">++++[<+++++++>-]<",
    29: ">++++[<+++++++>-]<+",
    30: ">+++++[<++++++>-]<",
    31: ">+++++[<++++++>-]<+",
    32: ">++++[<++++++++>-]<",
    33: ">++++[<++++++++>-]<+",
    34: ">--[<-->+++++++]<--",
    35: ">--[<-->+++++++]<-",
    36: ">--[<-->+++++++]<",
    37: ">---[<+>+++++++]<",
    38: ">---[<+>+++++++]<+",
    39: ">---[<+>+++++++]<++",
    40: ">--[<+>++++++]<---",
    41: ">--[<+>++++++]<--",
    42: ">--[<+>++++++]<-",
    43: ">--[<+>++++++]<",
    44: ">--[<+>++++++]<+",
    45: ">--[<+>++++++]<++",
    46: ">--[<+>++++++]<+++",
    47: ">-[<+>-----]<----",
    48: ">-[<+>-----]<---",
    49: ">-[<+>-----]<--",
    50: ">-[<+>-----]<-",
    51: ">-[<+>-----]<",
    52: ">-[<+>-----]<+",
    53: ">-[<+>-----]<++",
    54: ">-[<+>-----]<+++",
    55: ">-[<+>-----]<++++",
    56: ">-[<+>-----]<+++++",
    57: ">-[<+>+++++++++]<",
    58: ">-[<+>+++++++++]<+",
    59: ">----[<+>----]<----",
    60: ">----[<+>----]<---",
    61: ">----[<+>----]<--",
    62: ">----[<+>----]<-",
    63: ">----[<+>----]<",
    64: ">----[<+>----]<+",
    65: ">----[<+>----]<++",
    66: ">----[<+>----]<+++",
    67: ">----[<--->----]<",
    68: ">----[<--->----]<+",
    69: ">----[<--->----]<++",
    70: ">-[<+>-------]<---",
    71: ">-[<+>-------]<--",
    72: ">-[<+>-------]<-",
    73: ">-[<+>-------]<",
    74: ">-[<+>-------]<+",
    75: ">-[<+>-------]<++",
    76: ">-[<+>-------]<+++",
    77: ">-[<+>---]<--------",
    78: ">-[<+>---]<-------",
    79: ">-[<+>---]<------",
    80: ">-[<+>---]<-----",
    81: ">-[<+>---]<----",
    82: ">-[<+>---]<---",
    83: ">-[<+>---]<--",
    84: ">-[<+>---]<-",
    85: ">-[<+>---]<",
    86: ">-[<+>---]<+",
    87: ">-[<+>---]<++",
    88: ">-[<+>---]<+++",
    89: ">-[<+>---]<++++",
    90: ">-[<+>---]<+++++",
    91: ">-[<+>---]<++++++",
    92: ">-[<+>---]<+++++++",
    93: ">-[<+>---]<++++++++",
    94: ">-[<+>---]<+++++++++",
    95: ">-[<++>-----]<-------",
    96: ">-[<++>-----]<------",
    97: ">-[<++>-----]<-----",
    98: ">-[<++>-----]<----",
    99: ">-[<++>-----]<---",
    100: ">-[<++>-----]<--",
    101: ">-[<++>-----]<-",
    102: ">-[<++>-----]<",
    103: ">-[<++>-----]<+",
    104: ">-[<++>-----]<++",
    105: ">-[<++>-----]<+++",
    106: ">-[<++>-----]<++++",
    107: ">-[<++>-----]<+++++",
    108: ">-[<-->-------]<--",
    109: ">-[<-->-------]<-",
    110: ">-[<-->-------]<",
    111: ">-[<-->-------]<+",
    112: ">-[<-->-------]<++",
    113: ">-[<++>+++++++++]<-",
    114: ">-[<++>+++++++++]<",
    115: ">-[<++>+++++++++]<+",
    116: ">--------[<+++>--]<",
    117: ">----[<+++++>--]<-",
    118: ">----[<+++++>--]<",
    119: ">------[<+++>--]<",
    120: ">----[<+++>--]<--",
    121: ">----[<+++>--]<-",
    122: ">----[<+++>--]<",
    123: ">--[<+>--]<----",
    124: ">--[<+>--]<---",
    125: ">--[<+>--]<--",
    126: ">--[<+>--]<-",
    127: ">--[<+>--]<",
    128: ">--[<->--]<-",
    129: ">--[<->--]<",
    130: ">--[<->--]<+",
    131: ">--[<->--]<++",
    132: ">--[<->--]<+++",
    133: ">--[<->--]<++++",
    134: ">----[<--->--]<",
    135: ">----[<--->--]<+",
    136: ">----[<--->--]<++",
    137: ">------[<--->--]<",
    138: ">----[<----->--]<",
    139: ">----[<----->--]<+",
    140: ">--------[<--->--]<",
    141: ">-[<-->+++++++++]<-",
    142: ">-[<-->+++++++++]<",
    143: ">-[<-->+++++++++]<+",
    144: ">-[<++>-------]<--",
    145: ">-[<++>-------]<-",
    146: ">-[<++>-------]<",
    147: ">-[<++>-------]<+",
    148: ">-[<++>-------]<++",
    149: ">-[<-->-----]<-----",
    150: ">-[<-->-----]<----",
    151: ">-[<-->-----]<---",
    152: ">-[<-->-----]<--",
    153: ">-[<-->-----]<-",
    154: ">-[<-->-----]<",
    155: ">-[<-->-----]<+",
    156: ">-[<-->-----]<++",
    157: ">-[<-->-----]<+++",
    158: ">-[<-->-----]<++++",
    159: ">-[<-->-----]<+++++",
    160: ">-[<-->-----]<++++++",
    161: ">-[<-->-----]<+++++++",
    162: ">-[<->---]<---------",
    163: ">-[<->---]<--------",
    164: ">-[<->---]<-------",
    165: ">-[<->---]<------",
    166: ">-[<->---]<-----",
    167: ">-[<->---]<----",
    168: ">-[<->---]<---",
    169: ">-[<->---]<--",
    170: ">-[<->---]<-",
    171: ">-[<->---]<",
    172: ">-[<->---]<+",
    173: ">-[<->---]<++",
    174: ">-[<->---]<+++",
    175: ">-[<->---]<++++",
    176: ">-[<->---]<+++++",
    177: ">-[<->---]<++++++",
    178: ">-[<->---]<+++++++",
    179: ">-[<->---]<++++++++",
    180: ">-[<->-------]<---",
    181: ">-[<->-------]<--",
    182: ">-[<->-------]<-",
    183: ">-[<->-------]<",
    184: ">-[<->-------]<+",
    185: ">-[<->-------]<++",
    186: ">-[<->-------]<+++",
    187: ">----[<+++>----]<--",
    188: ">----[<+++>----]<-",
    189: ">----[<+++>----]<",
    190: ">----[<->----]<---",
    191: ">----[<->----]<--",
    192: ">----[<->----]<-",
    193: ">----[<->----]<",
    194: ">----[<->----]<+",
    195: ">----[<->----]<++",
    196: ">----[<->----]<+++",
    197: ">----[<->----]<++++",
    198: ">-[<->+++++++++]<-",
    199: ">-[<->+++++++++]<",
    200: ">-[<->-----]<-----",
    201: ">-[<->-----]<----",
    202: ">-[<->-----]<---",
    203: ">-[<->-----]<--",
    204: ">-[<->-----]<-",
    205: ">-[<->-----]<",
    206: ">-[<->-----]<+",
    207: ">-[<->-----]<++",
    208: ">-[<->-----]<+++",
    209: ">-[<->-----]<++++",
    210: ">--[<->++++++]<---",
    211: ">--[<->++++++]<--",
    212: ">--[<->++++++]<-",
    213: ">--[<->++++++]<",
    214: ">--[<->++++++]<+",
    215: ">--[<->++++++]<++",
    216: ">--[<->++++++]<+++",
    217: ">---[<->+++++++]<--",
    218: ">---[<->+++++++]<-",
    219: ">---[<->+++++++]<",
    220: ">--[<++>+++++++]<",
    221: ">--[<++>+++++++]<+",
    222: ">--[<++>+++++++]<++",
    223: ">----[<-------->+]<-",
    224: ">----[<-------->+]<",
    225: ">-----[<------>+]<-",
    226: ">-----[<------>+]<",
    227: ">----[<------->+]<-",
    228: ">----[<------->+]<",
    229: ">---[<--------->+]<",
    230: ">-----[<----->+]<-",
    231: ">-----[<----->+]<",
    232: ">----[<------>+]<",
    233: ">----[<------>+]<+",
    234: ">---[<------->+]<-",
    235: ">---[<------->+]<",
    236: ">----[<----->+]<",
    237: ">---[<------>+]<-",
    238: ">---[<------>+]<",
    239: ">----[<---->+]<-",
    240: ">----[<---->+]<",
    241: ">---[<----->+]<",
}

_program = "++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.+++.[-]<[-]<[-]<[-]<"
program

multiply = ",>,<[>[>+>+<<-]>>[<<+>>-]<<<-].>.>."


from sly import Lexer, Parser

class BFLexer(Lexer):
    tokens = {INCR, DECR, PTR_INCR, PTR_DECR, INPUT, OUTPUT, LPAREN, RPAREN}
    ignore = " \t\r\n"
    INCR = r"\+"
    DECR = r"\-"
    PTR_INCR = r"\>"
    PTR_DECR = r"\<"
    INPUT = r"\,"
    OUTPUT = r"\."
    LPAREN = r"\["
    RPAREN = r"\]"

class BFParser(Parser):
    debugfile = "parser.out"
    tokens = BFLexer.tokens
    precedence = (("right", INCR, DECR, PTR_INCR, PTR_DECR),)
    @_("command code")
    def code(self, p):
        return [p[0]] + p.code
    @_("")
    def code(self, p):
        return []
    @_("add", "ptr_offset", "input", "output", "loop")
    def command(self, p):
        return p[0]
    @_("INCR add")
    def add(self, p):
        return p.add.incr()
    @_("DECR add")
    def add(self, p):
        return p.add.decr()
    @_("INCR", "DECR")
    def add(self, p):
        return Add(int(p[0] + "1"))
    @_("PTR_INCR ptr_offset")
    def ptr_offset(self, p):
        return p.ptr_offset.incr()
    @_("PTR_DECR ptr_offset")
    def ptr_offset(self, p):
        return p.ptr_offset.decr()
    @_("PTR_INCR", "PTR_DECR")
    def ptr_offset(self, p):
        return Offset({">": 1, "<": -1}[p[0]])
    @_("INPUT")
    def input(self, p):
        return Input()
    @_("OUTPUT")
    def output(self, p):
        return Output()
    @_("LPAREN code RPAREN")
    def loop(self, p):
        return Loop(p.code)


class Add:
    def __init__(self, count):
        self.count = count
    def incr(self):
        self.count = (self.count + 1) % CELL_SIZE
        return self
    def decr(self):
        self.count = (self.count - 1) % CELL_SIZE
        return self
    def __repr__(self):
        return f"Add({self.count})"


class Offset:
    def __init__(self, count):
        self.count = count
    def incr(self):
        self.count = (self.count + 1) % TAPE_LENGTH
        return self
    def decr(self):
        self.count = (self.count - 1) % TAPE_LENGTH
        return self
    def __repr__(self):
        return f"Offset({self.count})"

class Input:
    def __repr__(self):
        return "Input"

class Output:
    def __repr__(self):
        return "Output"

class Loop:
    def __init__(self, body):
        self.body = body
    def __repr__(self):
        return f"Loop({self.body})"

@dataclass
class MachineState:
    def __init__(self, output, tape):
        self.output = output
        self.tape = tape



class BFInterpreter:
    def __init__(self, interactive=False):
        self.interactive = interactive
    def run(self, program, inputs=None):
        tape = [0] * TAPE_LENGTH
        pc = 0
        ptr = 0
        stack = []
        jmp = False
        open = 0
        output = ""
        while True:
            try:
                c = program[pc]
            except IndexError:
                break
            if not jmp:
                if c == ">":
                    ptr = (ptr + 1) % TAPE_LENGTH
                if c == "<":
                    ptr = (ptr - 1) % TAPE_LENGTH
                elif c == "+":
                    tape[ptr] = (tape[ptr] + 1) % 256
                elif c == "-":
                    tape[ptr] = (tape[ptr] - 1) % 256
                elif c == ",":
                    if self.interactive:
                        tape[ptr] = int(input(f"tape[{ptr}] = "))
                    else:
                        tape[ptr] = inputs.pop()
                elif c == ".":
                    if self.interactive:
                        print(chr(tape[ptr]), end="")
                    output += chr(tape[ptr])
            if c == "[":
                if not jmp:
                    if tape[ptr] == 0:
                        jmp = True
                        open = 1
                    else:
                        stack.append(pc)
                else:
                    open += 1
            elif c == "]":
                if not jmp:
                    pc = stack.pop() - 1
                else:
                    open -= 1
                    if not open:
                        jmp = False
            pc += 1
        return MachineState(output, tape)

class Program:
    def __init__(self, source):
        self.source = source
    def __eq__(self, other):
        j = BFInterpreter(interactive=False)
        return j.run(self.source) == j.run(other.source)
    def __lt__(self, other):
        return len(self.source) < len(other.source)
    def __le__(self, other):
        return len(self.source) <= len(other.source)
    def __add__(self, other):
        if isinstance(other, Program):
            return Program(self.source + other.source)
        else:
            return Program(self.source + other)
    def __repr__(self):
        return self.source

def number(n):
    n = n % 256
    if n < 16: 
        return n * "+"
    elif n > 241:
        return "-" * (256 - n)
    return CONSTANTS[n]

def optimize(program):
    new_program = program
    while True:
        new_program = new_program.replace("<>", "")
        new_program = new_program.replace("><", "")
        new_program = new_program.replace("+-", "")
        new_program = new_program.replace("-+", "")
        new_program = new_program.replace("+,", "")
        new_program = new_program.replace("-,", "")
        if new_program == program:
            return new_program
        else:
            program = new_program
    
def put_str(string):
    return Program(optimize(f">{'>'.join(number(ord(c)) for c in string)}[<]>"))

def print_str(string, cleanup=True):
    start = string[0]
    prog = number(ord(start)) + "."
    for c in string[1:]:
        prog += number(ord(c) - ord(start)) + "."
        start = c
    if cleanup:
        prog += "[-]"
    return Program(optimize(prog))

if __name__ == "__main__":
    interp = BFInterpreter(interactive=True)
    helloworld = put_str("Dickmilch!\n") + "[[.>]<[<]>]"
    helloworld2 = Program("+[>") + print_str("Dickmilch!\n") + "[-]<]"
    lexer = BFLexer()
    parser = BFParser()
    # for t in lexer.tokenize(helloworld.source):
    #     print(t)
    print(parser.parse(lexer.tokenize(helloworld2.source)))

    # print(helloworld)
    # print(helloworld2)
    # print(Program(_program) == print_str("Hello world!"))
    # print(helloworld > helloworld2)
    